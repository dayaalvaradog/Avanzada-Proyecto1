
@{
    ViewData["Title"] = "SolicitudRepuesto";
}

<div style="text-align: right;">
    <button class="btn btn-sm btn-success">
        <a class="nav-link text-dark" asp-area="" asp-controller="SolicitudRepuesto" asp-action="SolicitarRepuesto">Solicitar Repuesto</a>
    </button>
</div>

<div id="mensajeListaSolicitudes" class="mt-3"></div>

<table id="solicitudesTable" class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Id Solicitud</th>
            <th>Id Repuesto</th>
            <th>Repuesto</th>
            <th>Solicitante</th>
            <th>Cantidad Solicitada</th>
            <th>Fecha Solicitud</th>
            <th>Estado</th>
            <th>Fecha Entrega</th>
            <th>Usuario Entrega</th>
        </tr>
    </thead>
    <tbody id="solicitudesTableBody">
    </tbody>
</table>

@section Scripts {
    <script>
        const API_BASE_URL = "https://localhost:7002";
        const API_SOLICITUDES_URL = `${API_BASE_URL}/api/SolicitudRepuesto`;
        const solicitudesTableBody = document.getElementById('solicitudesTableBody');
        const mensajeListaSolicitudes = document.getElementById('mensajeListaSolicitudes');
        // Se obtiene los datos del usuario logueado
        function getLoggedInUserData() {
            const userDataString = localStorage.getItem('userData');
            return userDataString ? JSON.parse(userDataString) : null;
        }
        const loggedInUserData = getLoggedInUserData();
        const idUsuario = parseInt(loggedInUserData.id);

        function formatDateTime(dateString) {
            if (!dateString) {
                return ''; // Si el valor es null o vacío, retorna una cadena vacía
            }
            const date = new Date(dateString);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Meses son 0-indexados
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');

            return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
        }
        async function loadUsers() {
            try {
                
                //se saca el id del usuario logueado
                if (!loggedInUserData || !loggedInUserData.id) {
                    mensajeListaSolicitudes.className = 'alert alert-warning';
                    mensajeListaSolicitudes.innerHTML = 'No se encontró información del usuario logueado.';
                    return;
                }

                const response = await fetch(`${API_SOLICITUDES_URL}/ObtenerSolicitudesPorIdSolicitante/${idUsuario}`);
                if (response.ok) {
                    const solicitudes = await response.json();
                    solicitudesTableBody.innerHTML = '';
                    if (solicitudes.length === 0) {
                        mensajeListaSolicitudes.className = 'alert alert-info';
                        mensajeListaSolicitudes.innerHTML = 'No se encontraron solicitudes.';
                        return;
                    }
                    solicitudes.forEach(solicitud => {
                        const usuarioEntregaNombre = solicitud.usuarioEntrega ? `${solicitud.usuarioEntrega.nombre} ${solicitud.usuarioEntrega.apellido}` : '';
                        const row = `
                            <tr>
                                <td>${solicitud.id}</td>
                                <td>${solicitud.idRepuesto}</td>
                                <td>${solicitud.repuesto.nombre}</td>
                                <td>${solicitud.solicitante.nombre} ${solicitud.solicitante.apellido}</td>
                                <td>${solicitud.cantidadSolicitada}</td>
                                <td>${formatDateTime(solicitud.fechaSolicitud)}</td>
                                <td>${solicitud.estado}</td>
                                <td>${formatDateTime(solicitud.fechaEntrega)}</td>
                                <td>${usuarioEntregaNombre}</td>
                                <td>
                                </td>
                            </tr>
                        `;
                        solicitudesTableBody.innerHTML += row;
                    });

                } else {
                    const errorData = await response.json();
                    mensajeListaSolicitudes.className = 'alert alert-danger';
                    mensajeListaSolicitudes.innerHTML = `Error al cargar solicitudes: ${errorData.message}`;
                }
            } catch (error) {
                mensajeListaSolicitudes.className = 'alert alert-danger';
                mensajeListaSolicitudes.innerHTML = `Ocurrió un error de red: ${error.message}.`;
            }
        }

        loadUsers();
    </script>
}